#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <LEDMatrixDriver.hpp>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Html code for input webpage
const char MAIN_page[] PROGMEM = R"=====(
<!DOCTYPE html>
<html>
<body>

<center>
<br>
<h2> IOT based scrolling LED Timetable Display </h2>
<h3>Done BY:</h3>
<br>
<h3>Sneha Tiroumourougane 2019115099</h3>
<br><br>
<h2> ENTER THE TIMETABLE :</h2>

<form action="/action_page">
<center>
<table>
<tr>
<th>HOURS</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
<tr>
<th>TIME/DAY</th>
<th>8.30am-9.20am</th>
<th>9.25am-10.15am</th>
<th>10.30am-11.20am</th>
<th>11.25am-12.15pm</th>
<th>1.10pm-2.00pm</th>
<th>2.05pm-2.55pm</th>
<th>3:00pm-3.50pm</th>
<th>3.55pm-4.45pm</th>
</tr>
<tr>
<tr>
<td>MONDAY</td>
<td><input type="text" name="11"><td>
<td><input type="text" name="12"><td>
<td><input type="text" name="13"><td>
<td><input type="text" name="14"><td>
<td><input type="text" name="15"><td>
<td><input type="text" name="16"><td>
<td><input type="text" name="17"><td>
<td><input type="text" name="18"><td>
</tr>
<tr>
<td>TUESDAY</td>
<td><input type="text" name="21"><td>
<td><input type="text" name="22"><td>
<td><input type="text" name="23"><td>
<td><input type="text" name="24"><td>
<td><input type="text" name="25"><td>
<td><input type="text" name="26"><td>
<td><input type="text" name="27"><td>
<td><input type="text" name="28"><td>
</tr>
<tr>
<td>WEDNESDAY</td>
<td><input type="text" name="31"><td>
<td><input type="text" name="32"><td>
<td><input type="text" name="33"><td>
<td><input type="text" name="34"><td>
<td><input type="text" name="35"><td>
<td><input type="text" name="36"><td>
<td><input type="text" name="37"><td>
<td><input type="text" name="38"><td>
</tr>
<tr>
<td>THURSDAY</td>
<td><input type="text" name="41"><td>
<td><input type="text" name="42"><td>
<td><input type="text" name="43"><td>
<td><input type="text" name="44"><td>
<td><input type="text" name="45"><td>
<td><input type="text" name="46"><td>
<td><input type="text" name="47"><td>
<td><input type="text" name="48"><td>
</tr>
<tr>
<td>FRIDAY</td>
<td><input type="text" name="51"><td>
<td><input type="text" name="52"><td>
<td><input type="text" name="53"><td>
<td><input type="text" name="54"><td>
<td><input type="text" name="55"><td>
<td><input type="text" name="56"><td>
<td><input type="text" name="57"><td>
<td><input type="text" name="58"><td>
</tr>
</table>
</center>
<input type="submit" value="Submit"> 
</form> 

</body>
</html>
)=====";

//SSID and Password of your WiFi router or mobile hotspot
const char* ssid = "Galaxy S109d3b";// WiFi name
const char* password = "camg8729"; // WiFi password

// Arrays for names of different inputs in the table 
char Monday[8][8]={"11","12","13","14","15","16","17","18"};
char Tuesday[8][8]={"21","22","23","24","25","26","27","28"};
char Wednesday[8][8]={"31","32","33","34","35","36","37","38"};
char Thursday[8][8]={"41","42","43","44","45","46","47","48"};
char Friday[8][8]={"51","52","53","54","55","56","57","58"};

const long utcOffsetInSeconds = 3600;// Offset for adjusting time to Indian Standard Time

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);

ESP8266WebServer server(80); //Server on port 80

const uint8_t LEDMATRIX_CS_PIN = 15;

// Define LED Matrix dimensions (0-n) - eg: 32x8 = 31x7
const int LEDMATRIX_WIDTH = 31;  
const int LEDMATRIX_HEIGHT = 7;
const int LEDMATRIX_SEGMENTS = 4;

// The LEDMatrixDriver class instance
LEDMatrixDriver lmd(LEDMATRIX_SEGMENTS, LEDMATRIX_CS_PIN);

// Block font 8x8
byte  font[][8]= {
    { 0,0,0,0,0,0,0,0 }, //space
    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
    };

int x=LEDMATRIX_WIDTH, y=0;   // start top left

int len = 0;
// Variables for selecting text speed
const int ANIM_DELAY = 100;
unsigned long myTime=millis();
unsigned long intro=millis();

// Routine executed when IP is opened in the browser
void handleRoot() {
 String f = MAIN_page; //Read HTML contents
 server.send(200, "text/html", f); //Send web page
}

// Routine executed when Submit button is pressed
void handleForm() {
 String f = "<a href='/'> Go Back </a>";
 server.send(200, "text/html", f); //Send web page
}

// Function for checking the current lab period based on time
int checkperiod(int hour, int minut){
  if ((hour == 8 && minut >= 30) || (hour == 9 && minut < 20)){ return 0;}
  else if (hour == 9 && minut >= 25 || hour == 10 && minut < 15){ return 1;}
  else if (hour == 10 && minut >= 30 || hour == 11 && minut < 20){ return 2;}
  else if (hour == 11 && minut >= 25 || hour == 12 && minut < 15){ return 3;}
  else if (hour == 13 && minut >= 10){ return 4;}
  else if (hour == 14 && minut >= 5 || hour == 14 && minut == 55){ return 5;}
  else if (hour == 15 && minut >= 0 || hour == 15 && minut < 50){ return 6;}
  else if (hour == 15 && minut >= 55 || hour == 16 && minut < 45){ return 7;}
  else if (hour < 8 || hour > 17){ return 8;}
  else { return 9;}
}


// SETUP
void setup(void){
  Serial.begin(115200);
    
  //Initialize the display  
  lmd.setEnabled(true);  
  lmd.setIntensity(10);   // 0 = low, 10 = high  
  
  WiFi.begin(ssid, password); //Connect to the WiFi router or the mobile hotspot
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  //If connection successful, show the IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println("WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP()); //IP address assigned to the ESP board

  timeClient.begin();
  timeClient.setTimeOffset(19800);
 
  server.on("/", handleRoot);  //Which routine to handle at root location
  server.on("/action_page", handleForm); //form action is performed here
  server.begin(); //Start server
  Serial.println("HTTP server started");

}

// LOOP
void loop(void){
  
  server.handleClient();          //Handle client requests
  timeClient.update(); // Update current time
  int hours = 0, minutes = 0, current_period = 8;
  hours = timeClient.getHours(); // Get the current hour
  minutes = timeClient.getMinutes(); //Get the current minute
  current_period = checkperiod(hours,minutes);// Function to get the current lab period based on time
  
  // If conditions to check the current day and display the corresponding lab periods on that day
  // If it is Monday
  if (timeClient.getDay() == 1 && current_period < 8){
    String monPeriod = server.arg(Monday[current_period]); 
    int str1_len = monPeriod.length() + 1;
    char mon_array[str1_len];
    monPeriod.toCharArray(mon_array, str1_len);
    len = str1_len;
    displayText(mon_array);
  }
  // If it is Tuesday
  else if (timeClient.getDay() == 2 && current_period < 8){
    String tuePeriod = server.arg(Tuesday[current_period]); 
    int str2_len = tuePeriod.length() + 1;
    char tue_array[str2_len];
    tuePeriod.toCharArray(tue_array, str2_len);
    len = str2_len;
    displayText(tue_array);
  }
  // If it is Wednesday
  else if (timeClient.getDay() == 3 && current_period < 8){
    String wedPeriod = server.arg(Wednesday[current_period]); 
    int str3_len = wedPeriod.length() + 1;
    char wed_array[str3_len];
    wedPeriod.toCharArray(wed_array, str3_len);
    len = str3_len;
    displayText(wed_array);
  }
  //If it is Thursday
  else if (timeClient.getDay() == 4 && current_period < 8){
    String thuPeriod = server.arg(Thursday[current_period]); 
    int str4_len = thuPeriod.length() + 1;
    char thu_array[str4_len];
    thuPeriod.toCharArray(thu_array, str4_len);
    len = str4_len;
    displayText(thu_array);
  }
  // If it is Friday
  else if (timeClient.getDay() == 5 && current_period < 8){
    String friPeriod = server.arg(Friday[current_period]); 
    int str5_len = friPeriod.length() + 1;
    char fri_array[str5_len];
    friPeriod.toCharArray(fri_array, str5_len);
    len = str5_len;
    displayText(fri_array);
  }
  // If there is break between the periods
  else if (timeClient.getDay() <= 5 && current_period == 9){
    char break_array[6] = "Break";
    len = 6;
    displayText(break_array);
  }
  // If the lab is closed
  else if (current_period == 8){
    char closed_array[11] = "Lab Closed";
    len = 11;
    displayText(closed_array);
  }
  else{
    char intro_array[28] = "IOT based Timetable Display";
    len = 28;
    displayText(intro_array);
  }
}  

// Function used to display the text on the LED matrix
void displayText ( char * theText)
{
   if ( myTime + ANIM_DELAY < millis()) 
   {
        myTime=millis();
        // Draw the text to the current position
        drawString(theText, len, x, 0);
        // In case you wonder why we don't have to call lmd.clear() in every loop: The font has a opaque (black) background... 
        // Toggle display of the new framebuffer
        lmd.display();  
        // Advance to next coordinate
        if( --x < len * -8 )
        {
            x = LEDMATRIX_WIDTH;
            lmd.clear();
        }
   }  
}

//Function used to draw a string of the given length to the given position.
void drawString(char* text, int len, int x, int y )
{
  
  for( int idx = 0; idx < len; idx ++ )
  {
    int c = text[idx] - 32;

    // stop if char is outside visible area
    if( x + idx * 8  > LEDMATRIX_WIDTH )
      return;

    // only draw if char is visible
    if( 8 + x + idx * 8 > 0 )
      drawSprite( font[c], x + idx * 8, y, 8, 8 );
  }
}

// Function used to draw a sprite to the given position using the width and height supplied (usually 8x8)
void drawSprite( byte* sprite, int x, int y, int width, int height )
{
  // The mask is used to get the column bit from the sprite row
  byte mask = B10000000;
  
  for( int iy = 0; iy < height; iy++ )
  {
    for( int ix = 0; ix < width; ix++ )
    {
      //font is backwards so swap it around.
      //lmd.setPixel(x + ix, y + iy, (bool)(sprite[iy] & mask ));
        lmd.setPixel(x + (width - ix), y + iy, (bool)(sprite[iy] & mask ));

      // shift the mask by one pixel to the right
      mask = mask >> 1;
    }

    // reset column mask
    mask = B10000000;
  }
}
